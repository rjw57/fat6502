# Memory map for buri 6502 computer
MEMORY
{
    ZP:         start=$0000, size=$00D0, define=yes;    # Zero page (user)
    STACK:      start=$0100, size=$0100, define=yes;    # Stack page
    RAM:        start=$0400, size=$7C00, define=yes;    # User memory
    USRCODE:    start=$5000, size=$4000, file=%O;       # User code
    IO:         start=$DF80, size=$0080, define=yes;    # 8x16 byte IO pages
    ROM:        start=$E000, size=$2000, define=yes;    # ROM
}

# Segments within the EEPROM
SEGMENTS
{
    # Initialised segments
    STARTUP:    load=USRCODE, type=ro;                  # entry point
    INIT:       load=USRCODE, type=ro, optional=yes;
    CODE:       load=USRCODE, type=ro;                  # code
    DATA:       load=USRCODE, type=rw, define=yes;      # data segment
    RODATA:     load=USRCODE, type=ro, define=yes;      # data segment

    # Uninitialised segments
    ZEROPAGE:   load=ZP, type=zp, optional=yes;         # Zero-page
    ZPSAVE:     load=RAM, type=bss, optional=yes;       # save space for zeropage
    BSS:        load=RAM, type=bss, define=yes;         # temp storage
    HEAP:       load=RAM, type=bss, optional=yes;       # C heap storage
}

FEATURES
{
    CONDES:    segment = STARTUP,
               type    = constructor,
               label   = __CONSTRUCTOR_TABLE__,
               count   = __CONSTRUCTOR_COUNT__;
    CONDES:    segment = STARTUP,
               type    = destructor,
               label   = __DESTRUCTOR_TABLE__,
               count   = __DESTRUCTOR_COUNT__;
}

SYMBOLS
{
    __STACKSIZE__: type=weak, value=$0200;

    # OS jump table vectors defined at start of ROM.
    putc: type=weak, value=__ROM_START__;
    getc: type=weak, value=__ROM_START__+3;
}

