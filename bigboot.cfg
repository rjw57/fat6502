MEMORY {
	LOWZP:	start = $00, size = $80, type = rw;
	HIGHZP:	start = $c0, size = $40, type = rw;
	LORAM:	start = $0200, size = $1e00;
	FLASH:	start = $2000, size = $1e00;
	# $2000..$3dff is reserved for the flash buffer
	# $3e00..$3fff is memory mapped I/O
	# $4000..$bfff is reserved for the cluster buffer
	ROM:	start = $c000, size = $4000, file = %O, define = yes;
}
SEGMENTS {
	ZEROPAGE:	load = LOWZP, type = zp;
	DEVZP:		load = HIGHZP, type = zp, start = $e0, optional = yes;
	VOLZP:		load = HIGHZP, type = zp, start = $f0, optional = yes;
	BSS:		load = LORAM, type = bss, define = yes, align = $100;
	VOLBSS:		load = LORAM, type = bss, start = $1f00, optional = yes;
	DEVBSS:		load = LORAM, type = bss, start = $1f40, optional = yes;
	CHECKSUM:	load = ROM, type = wprot;
	CODE:		load = ROM, type = wprot;
	RODATA:		load = ROM, type = wprot, align = $100;
	DATA:		load = ROM, type = rw;
	RELOC:		load = ROM, run = FLASH, type = rw, define = yes, optional = yes;
	VOLVECTORS:	load = ROM, type = ro, start = $ff00, optional = yes;
	DEVVECTORS:	load = ROM, type = ro, start = $ff40, optional = yes;
	CTLVECTORS:	load = ROM, type = ro, start = $ff50, optional = yes;
	DBGVECTORS:	load = ROM, type = ro, start = $ff60, optional = yes;
	GFXVECTORS:	load = ROM, type = ro, start = $ff80, optional = yes;
	DSKVECTORS:	load = ROM, type = ro, start = $ffa0, optional = yes;
	VERSION:	load = ROM, type = ro, start = $fff0;
	CPUVECTORS:	load = ROM, type = ro, start = $fffa;
}
FEATURES {
	CONDES:	segment = RODATA,
		type = constructor,
		label = __CONSTRUCTOR_TABLE__,
		count = __CONSTRUCTOR_COUNT__;
	CONDES:	segment = RODATA,
		type = destructor,
		label = __DESTRUCTOR_TABLE__,
		count = __DESTRUCTOR_COUNT__;
}
SYMBOLS {
	__STACKSIZE__ = $800;
}
